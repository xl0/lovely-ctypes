"""A common place for various bits"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/09_utils.ipynb.

# %% auto 0
__all__ = ['batched', 'ansicolor', 'colored']

# %% ../nbs/09_utils.ipynb 3
from typing import Optional, Union, Tuple, TypeAlias

# %% ../nbs/09_utils.ipynb 4
# ~itertools.batched in python 3.12+
def batched(lst, n): return [ lst[i:i+n] for i in range(0, len(lst), n) ]

# %% ../nbs/09_utils.ipynb 6
Color: TypeAlias = str | None
ColorPair: TypeAlias = tuple[Color, Color]

# %% ../nbs/09_utils.ipynb 7
_ansicolors = ('black', 'red', 'green', 'yellow', 'blue', 'magenta', 'cyan', 'white')

def ansicolor(color: str, background=False):
    return f"\u001b[{10*background + 60*(color.upper() == color) + 30 + _ansicolors.index(color.lower())}m"

def colored(st, color: None|str|ColorPair):
    if color is None:
        return st
    if isinstance(color, tuple):
        text_color, bg_color = color
    else:
        text_color, bg_color = color, None

    assert text_color is None or text_color.lower() in _ansicolors, \
        f"Text color should be one of {list(_ansicolors) + [c.upper() for c in _ansicolors]}"
    assert bg_color is None or bg_color.lower() in _ansicolors, \
        f"Background color should be one of {list(_ansicolors) + [c.upper() for c in _ansicolors]}"

    result = st
    if text_color:
        result = f"{ansicolor(text_color)}{result}"
    if bg_color:
        result = f"{ansicolor(bg_color, background=True)}{result}"

    return f"{result}\u001b[0m"
